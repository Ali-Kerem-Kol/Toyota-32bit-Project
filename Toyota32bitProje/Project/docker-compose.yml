version: '3.9'

services:

  ############# ALTYAPI SERVİSLERİ #############

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "sh", "-c", "exec 3<>/dev/tcp/localhost/2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "9092:9092"
    networks:
      - app-network

  postgres-db:
    image: postgres:14
    container_name: postgres-db
    environment:
      POSTGRES_DB: exchange_rates
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 50s
      retries: 5
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    depends_on:
      postgres-db:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8083:80"
    networks:
      - app-network


  ############# SAĞLAYICILAR #############

  tcp-server:
    build:
      context: ./Servers/TCPServer
      dockerfile: Dockerfile
    container_name: TCPServer
    ports:
      - "5000:5000"
    volumes:
      - ./Servers/TCPServer/config:/app/Servers/TCPServer/config:ro
    networks:
      - app-network

  rest-server:
    build:
      context: ./Servers/RESTServer
      dockerfile: Dockerfile
    container_name: RESTServer
    ports:
      - "8081:8081"
    volumes:
      - ./Servers/RESTServer/config:/app/Servers/RESTServer/config:ro
    networks:
      - app-network


  ############# CONSUMER'LAR #############

  consumer-postgresql:
    build:
      context: ./Consumers/consumer-postgresql
      dockerfile: Dockerfile
    container_name: consumer-postgresql
    depends_on:
      kafka:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    volumes:
    - ./Consumers/consumer-postgresql/logs:/app/Consumers/consumer-postgresql/logs
    - ./Consumers/consumer-postgresql/config:/app/Consumers/consumer-postgresql/config:ro
    ports:
      - "8082:8082"
    networks:
      - app-network

  consumer-elasticsearch:
    build:
      context: ./Consumers/consumer-elasticsearch
      dockerfile: Dockerfile
    container_name: consumer-elasticsearch
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      JAVA_OPTS: "-Xms256m -Xmx512m"
    volumes:
      - ./Consumers/consumer-elasticsearch/logs:/app/Consumers/consumer-elasticsearch/logs
      - ./Consumers/consumer-elasticsearch/config:/app/Consumers/consumer-elasticsearch/config:ro
    networks:
      - app-network


  ############# LOG + SEARCH SİSTEMİ #############

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.audit.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD", "curl", "-s", "http://localhost:9200/_cat/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.1
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - app-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.7.1
    container_name: filebeat
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./Main/coordinator/logs:/app/Main/coordinator/logs:ro
      - ./Consumers/consumer-postgresql/logs:/app/Consumers/consumer-postgresql/logs:ro
      - ./Consumers/consumer-elasticsearch/logs:/app/Consumers/consumer-elasticsearch/logs:ro
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
    environment:
      - BEAT_STRICT_PERMS=false
    networks:
      - app-network


  ############# COORDINATOR #############

  coordinator:
    build:
      context: ./Main/coordinator
      dockerfile: Dockerfile
    container_name: coordinator
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      filebeat:
        condition: service_started
      consumer-postgresql:
        condition: service_started
      consumer-elasticsearch:
        condition: service_started
      rest-server:
        condition: service_started
      tcp-server:
        condition: service_started
    volumes:
      - ./Main/coordinator/logs:/app/Main/coordinator/logs
      - ./Main/coordinator/config:/app/Main/coordinator/config:ro
      - ./Main/coordinator/scripts:/app/Main/coordinator/scripts:ro
    networks:
      - app-network


networks:
  app-network:
    driver: bridge